version: 2.1

orbs:
  slack: circleci/slack@4.1

commands:
  destroy-environment:
    parameters:
      id:
        description: >
          Unique identifier.
        type: string
    steps:
      - run:
          name: "Destroy environment"
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.id>> &&
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.id>>
          when: on_fail

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: change into the frontend dir
          command: cd frontend &&
            npm install &&
            npm run build
      - restore_cache:
          keys: [frontend-build]

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: change into the backend dir
          command: cd backend &&
            npm install &&
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

      - slack/notify:
          event: fail
          template: basic_fail_1

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test Frontend
          command: cd frontend &&
            npm install &&
            npm run test
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test backend
          command: cd backend &&
            npm install &&
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan Frontend
          command: cd frontend &&
            npm install &&
            npm audit fix --force &&
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend
          command: cd backend &&
            npm install &&
            npm audit fix --force &&
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      # - run:
      #     name: Install tar and gzip
      #     command: yum install -y tar gzip
      # - run:
      #     name: Ensure backend Infra Exists
      #     command: |
      #       aws cloudformation deploy \
      #       --template-file .circleci/files/backend.yml \
      #       --stack-name "udapeople-bakcend-${CIRCLE_WORKFLOW_ID:0:7}" \
      #       --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
      #       --tags project=udapeople-backend
      # - run:
      #     name: Ensure frontend Infra Exists
      #     command: |
      #       aws cloudformation deploy \
      #       --template-file .circleci/files/frontend.yml \
      #       --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
      #       --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
      #       --tags project=udapeople-frontend
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].[InstanceId,PublicIpAddress]' \
              --output text \
              --filters "Name=tag:project,Values=udapeople" \
              > inventory.txt
      - persist_to_workspace:
          root: /tmp/ansible
          paths:
            - inventory.txt

      # - destroy-environment:
      #     id: ${CIRCLE_WORKFLOW_ID:0:7}

workflows:
  defaults:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires:
      #       - build-frontend
      # - test-backend:
      #     requires:
      #       - build-backend
      # - scan-frontend:
      #     requires:
      #       - build-frontend
      # - scan-backend:
      #     requires:
      #       - build-backend
      - deploy-infrastructure
